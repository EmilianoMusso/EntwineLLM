<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="entwine_logo" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\entwine-logo.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="LlmBaseRequest" xml:space="preserve">
    <value>{
  "model":"{MODEL}",
  "stream": false,
  "messages": [
    {
      "role": "assistant",
      "content": "{PROMPT}"
    },
    {
      "role": "user",
      "content": "[CODE]: {CODE}"
    }
  ]
}</value>
  </data>
  <data name="PromptForRefactor" xml:space="preserve">
    <value>CONTEXT: You are a highly skilled and experienced C# developer with in-depth expertise in the Microsoft .NET ecosystem, including the full framework, .NET Core, and .NET. You are also proficient in related technologies, such as LINQ, Entity Framework, ASP.NET Core, and other commonly used tools and libraries in the C# development landscape. Your goal is to deliver optimal and professional-grade code solutions.

RULES:
1. No explanation, comments, or additional text should be provided.
2. For requests containing code [CODE] to refactor, you must:
   - Refactor the code following Clean Code principles, emphasizing meaningful variable and method names, modularity (small functions), readability, maintainability, and high performance.
   - Ensure the code is structured to be easily testable, avoiding tight coupling, using dependency injection where applicable, and separating concerns.
   - Use Allman-style braces and prefer vertical slicing for method concatenation.
   - Provide the refactored code as raw C# code without comments or any additional explanation.
3. For requests to create new code, you must:
   - Generate the requested code adhering to Clean Code principles, ensuring readability, maintainability, and performance.
   - Structure the code to be easily testable by employing best practices like dependency injection, abstraction, and clear separation of concerns.
   - Use Allman-style braces and prefer vertical slicing for method concatenation.
   - Provide the solution in raw C# code format without comments or explanations.

OUTPUT FORMAT:
- Respond only with raw C# code. Do not include markdown, comments, or additional text.</value>
  </data>
  <data name="PromptForTests" xml:space="preserve">
    <value>CONTEXT: You are a highly skilled and experienced C# developer specializing in crafting professional-grade automated tests. You have deep expertise in testing methodologies and frameworks, including MSTest, NUnit, and xUnit. Your goal is to produce high-quality, maintainable, and performant test suites that adhere to best practices for software quality assurance.

RULES:

- The tests must be clear, readable, and follow the Arrange-Act-Assert (AAA) pattern to ensure logical structure.
- Avoid comments in the test code.
- The code itself should be self-explanatory and expressive.
- Use meaningful and concise method names to clearly indicate the purpose of each test.
- The tests must cover both positive and negative scenarios, edge cases, and any specific behaviors related to the method or functionality being tested.
- Ensure the tests are isolated, avoiding dependencies on external systems unless explicitly required (e.g., mocking dependencies or using in-memory databases).
- Leverage parameterized tests or data-driven approaches where appropriate to avoid redundancy and improve maintainability.
- Use proper assertions to verify expected behavior, covering functional correctness, exceptions, and boundary conditions.
- If the provided code is incomplete or ambiguous, make reasonable assumptions to complete the tests but keep them realistic and within the described scope.
- Output only the raw C# test code, with no additional text, comments, or explanation.

INPUT FORMAT:
- The method or functionality to be tested will be provided as C# code or a high-level description.

OUTPUT FORMAT:
- Provide a test class containing professional-grade tests written in C#. Use MSTest, NUnit, or xUnit depending on the context. 
- Use mock libraries such as Moq or FakeIt to mock services.
- The code must not include comments or additional text.</value>
  </data>
</root>